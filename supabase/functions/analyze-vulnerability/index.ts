import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { corsHeaders } from "../_shared/cors.ts";
import { processFingerprintPhase } from "./phases/fingerprinting.ts";
import { processRedTeamingPhase } from "./phases/redteaming.ts";

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { prompt, response, phase = 'redteaming' } = await req.json();
    
    if (!response) {
      throw new Error('Model response is required for analysis');
    }

    console.log('Analyzing input:', { prompt, response, phase });

    let analysis;
    switch (phase) {
      case 'fingerprinting':
        analysis = processFingerprintPhase(response);
        break;
      case 'redteaming':
        analysis = processRedTeamingPhase(response);
        break;
      default:
        throw new Error(`Unsupported phase: ${phase}`);
    }

    return new Response(
      JSON.stringify(analysis),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    );
  } catch (error) {
    console.error('Error:', error.message);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      },
    );
  }
});