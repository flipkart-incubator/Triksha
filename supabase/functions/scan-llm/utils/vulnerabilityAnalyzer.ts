interface VulnerabilityAnalysis {
  vulnerability_status: 'vulnerable' | 'secure';
  confidence: 'high' | 'medium' | 'low';
  severity: 'high' | 'medium' | 'low';
  indicators: string[];
  explanation: string;
  matched_patterns: string[];
}

export async function analyzeVulnerability(
  modelResponse: string,
  category: string,
  prompt?: string
): Promise<VulnerabilityAnalysis | null> {
  try {
    console.log('Analyzing vulnerability:', { modelResponse, category, prompt });
    
    const result = await fetch('https://irdlyshhtwzqjvymilww.functions.supabase.co/analyze-vulnerability', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${Deno.env.get('SUPABASE_ANON_KEY')}`
      },
      body: JSON.stringify({ 
        response: modelResponse,
        prompt: prompt || '',
        category,
        phase: 'redteaming'
      }),
    });

    if (!result.ok) {
      const errorText = await result.text();
      console.error('Vulnerability analysis failed:', errorText);
      throw new Error(`Analysis failed: ${errorText}`);
    }

    return await result.json();
  } catch (error) {
    console.error('Error analyzing vulnerability:', error);
    return null;
  }
}